//
//  litepcie_userclient.iig
//  litepcie
//
//  Created by skolaut on 9/9/23.
//

#ifndef litepcie_h
#define litepcie_h

#include <Availability.h>
#include <DriverKit/IOLib.h>
#include <DriverKit/IOUserClient.iig>

#include <DriverKit/DriverKit.iig>
#include <DriverKit/OSAction.iig>
#include <DriverKit/IOService.iig>
#include <DriverKit/IOMemoryDescriptor.iig>
#include <DriverKit/IODataQueueDispatchSource.iig>

class litepcie : public IOService {
public:
    virtual bool init(void) override;
    virtual kern_return_t Start(IOService* provider) override;
    virtual kern_return_t Stop(IOService* provider) override;
    virtual void free(void) override;

    virtual kern_return_t NewUserClient(uint32_t type, IOUserClient** userClient) override;
    
    virtual void InterruptOccurred(OSAction* action, uint64_t count, uint64_t time) TYPE(IOInterruptDispatchSource::InterruptOccurred);

    /* Other methods */
    kern_return_t WriteMemory(uint64_t offset, uint32_t value) LOCALONLY;
    kern_return_t ReadMemory(uint64_t offset, uint32_t* dest) LOCALONLY;
    
    kern_return_t InitDMAChannel(int chan_idx) LOCALONLY;
    kern_return_t SetupDMAReaderChannel(int chan_idx) LOCALONLY;
    kern_return_t SetupDMAWriterChannel(int chan_idx) LOCALONLY;
    kern_return_t StartDMAReaderChannel(int chan_idx, bool loop) LOCALONLY;
    kern_return_t StartDMAWriterChannel(int chan_idx, bool loop) LOCALONLY;
    kern_return_t StopDMAReaderChannel(int chan_idx) LOCALONLY;
    kern_return_t StopDMAWriterChannel(int chan_idx) LOCALONLY;
    kern_return_t StopDMAChannel(int chan_idx) LOCALONLY;
    void CleanupDMAChannel(int chan_idx) LOCALONLY;
};

#endif /* litepcie_h */
